# -*- coding: utf-8 -*-
"""Bob's Midi Convert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YNebID6yrtsqjCnXO5feFrG8LpLJqUR1
"""

# Install necessary packages
!pip install ffmpeg
!pip install piano_transcription_inference
!pip install yt-dlp
!pip install librosa
!pip install torch
!pip install tqdm
!pip install ipywidgets
!pip install pretty_midi

# Import libraries
import subprocess
import os
import re
import torch
from piano_transcription_inference import PianoTranscription, sample_rate, load_audio
import librosa
from tqdm.notebook import tqdm
import ipywidgets as widgets
from IPython.display import display, clear_output
from google.colab import files
import pretty_midi

# Function to post-process MIDI file and adjust note durations
def post_process_midi(midi_file_path, max_duration=2.0):
    # Load the MIDI file
    midi_data = pretty_midi.PrettyMIDI(midi_file_path)

    # Iterate over the notes in each instrument
    for instrument in midi_data.instruments:
        for note in instrument.notes:
            # Adjust the note duration if it exceeds the threshold
            if note.end - note.start > max_duration:
                note.end = note.start + max_duration

    # Save the modified MIDI file
    midi_data.write(midi_file_path)

# Function to validate YouTube URL
def is_valid_youtube_url(url):
    youtube_regex = (
        r'(https?://)?(www\.)?'
        '(youtube|youtu|youtube-nocookie)\.(com|be)/'
        '(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?\s]{11})')
    return re.match(youtube_regex, url)

# Function to sanitize file names
def sanitize_filename(name):
    invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
    for char in invalid_chars:
        name = name.replace(char, ' ')
    return name

# Function to download MP3 from YouTube
def download_mp3_from_youtube(youtube_url, custom_name=None):
    try:
        if not is_valid_youtube_url(youtube_url):
            print("Invalid YouTube URL provided.")
            return None, False

        title = sanitize_filename(custom_name) if custom_name else subprocess.run(
            ["yt-dlp", "--get-title", youtube_url], capture_output=True, text=True).stdout.strip()
        if not title:
            print("Failed to obtain a valid title.")
            return None, False

        output_template = f"/content/(AUDIO) {title}.mp3" if not custom_name else f"/content/{title}.mp3"
        subprocess.run(["yt-dlp", "-x", "--audio-format", "mp3", youtube_url, "-o", output_template], check=True)
        return output_template, custom_name is not None
    except Exception as e:
        print(f"Error downloading MP3: {e}")
        return None, False

# Function to convert MP3 to MIDI
def convert_mp3_to_midi(mp3_file_path, custom_named=False, custom_name=None, max_duration=2.0):
    try:
        device = 'cuda' if torch.cuda.is_available() else 'cpu'
        (audio, _) = librosa.load(mp3_file_path, sr=sample_rate, mono=True)
        transcriptor = PianoTranscription(device=device)

        # Create the output directory if it doesn't exist
        output_dir = "/content/output"
        os.makedirs(output_dir, exist_ok=True)

        if custom_named:
            midi_file_name = f"{output_dir}/{custom_name}.mid"
        else:
            midi_file_name = f"{output_dir}/{os.path.basename(mp3_file_path).replace('(AUDIO)', '(MIDI)').replace('.mp3', '.mid')}"

        with tqdm(total=100, desc="Converting to MIDI", bar_format="{l_bar}{bar}") as pbar:
            transcribed_dict = transcriptor.transcribe(audio, midi_file_name)
            pbar.update(100)

        # Post-process the MIDI file to adjust note durations
        post_process_midi(midi_file_name, max_duration)

        return midi_file_name
    except Exception as e:
        print(f"Error in MIDI conversion: {e}")
        return None

# Widgets for user input
youtube_url_input = widgets.Text(placeholder='YT URL', description='YT URL:')
custom_name_input = widgets.Text(placeholder='Optional', description='Name:')
max_duration_input = widgets.FloatText(value=0.25, description='Max Dur (s):')
start_button = widgets.Button(description='Convert', button_style='success', style={'button_color': '#234567'})
output_area = widgets.Output()

instructions_text = '''
Instructions:
1. To convert a YouTube video to MIDI, enter the YouTube URL in the "YT URL" field.
2. To convert an MP3 file to MIDI, leave the "YT URL" field empty and click the "Convert" button. You will be prompted to upload an MP3 file.
3. Optionally, provide a custom name for the output MIDI file in the "Name" field.
4. Adjust the maximum note duration (in seconds) using the "Max Dur (s)" field. Default is 0.25s.
5. Click the "Convert" button to start the conversion process.
6. The resulting MIDI file will be automatically downloaded once the conversion is complete.
'''

instructions_widget = widgets.Textarea(value=instructions_text, layout=widgets.Layout(width='100%', height='200px'))

# Event handler for the conversion button
def on_start_button_clicked(b):
    with output_area:
        clear_output()
        youtube_url = youtube_url_input.value.strip()

        if not youtube_url:
            print("No YouTube URL provided. Checking for uploaded MP3 file...")
            uploaded_mp3 = files.upload()
            if not uploaded_mp3:
                print("No MP3 file uploaded. Please provide either a YouTube URL or upload an MP3 file.")
                return

        print("Processing... Please be patient as this may take some time.")
        custom_name = custom_name_input.value if custom_name_input.value else None
        max_duration = max_duration_input.value

        if youtube_url:
            mp3_file_path, custom_named = download_mp3_from_youtube(youtube_url, custom_name)
        else:
            mp3_file = list(uploaded_mp3.keys())[0]
            mp3_file_path = f"/content/{mp3_file}"
            custom_named = custom_name is not None

        if mp3_file_path:
            midi_file_path = convert_mp3_to_midi(mp3_file_path, custom_named=custom_named, custom_name=custom_name, max_duration=max_duration)
            if midi_file_path:
                files.download(midi_file_path)

start_button.on_click(on_start_button_clicked)

# Layout for the widgets
input_form = widgets.VBox([instructions_widget, youtube_url_input, custom_name_input, max_duration_input, start_button])
display(input_form, output_area)